version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: slack-jobber-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-slack_jobber_app}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-slack_jobber_app}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # Redis for sessions and caching
  redis:
    image: redis:7-alpine
    container_name: slack-jobber-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  # Flask Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: slack-jobber-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-app_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-slack_jobber_app}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      FLASK_ENV: ${FLASK_ENV:-development}
      PORT: 8000
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
      SLACK_CLIENT_ID: ${SLACK_CLIENT_ID}
      SLACK_CLIENT_SECRET: ${SLACK_CLIENT_SECRET}
      JOBBER_API_KEY: ${JOBBER_API_KEY}
      JOBBER_API_SECRET: ${JOBBER_API_SECRET}
    volumes:
      - ./backend:/app
      - /app/__pycache__
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  # React Frontend (Development)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: slack-jobber-frontend-dev
    environment:
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - backend
    profiles:
      - dev
    networks:
      - app-network

  # React Frontend (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: slack-jobber-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - prod
    networks:
      - app-network

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: slack-jobber-celery-worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-app_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-slack_jobber_app}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      FLASK_ENV: ${FLASK_ENV:-development}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
      JOBBER_API_KEY: ${JOBBER_API_KEY}
      JOBBER_API_SECRET: ${JOBBER_API_SECRET}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: slack-jobber-celery-beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-app_user}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/${POSTGRES_DB:-slack_jobber_app}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      FLASK_ENV: ${FLASK_ENV:-development}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Network for service communication
networks:
  app-network:
    driver: bridge